# -*- mode: ruby -*-
# Vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "centos/7"
  # config.vm.box = "centos/8"
  # config.vm.box = "ubuntu/bionic64" # 18.04
  # config.vm.box = "ubuntu/focal64" # 20.04
  # I find "geerlingguy" has great updated ubuntu - glarson
  # config.vm.box = "geerlingguy/ubuntu1804" # 18.04
  config.vm.box = "geerlingguy/ubuntu2004" # 20.04
  # config.vm.box = "debian/stretch64"

  # This requires the "vagrant plugin install vagrant-disksize" to change disk size
  # config.disksize.size = '20GB'

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false
   
  # To prevent the iso guests from being mounted (like for alpine linux)
  # config.vbguest.auto_update = false
  
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network", type: "dhcp", bridge: "eth0", ip: "10.6.2.201"
  # I do the following on my home network so I can ssh into the box - glarson
  config.vm.network "public_network", type: "dhcp", bridge: "eth0"
  
  config.vm.network "forwarded_port", guest: 80, host: 8080
  # config.vm.network "forwarded_port", guest: 9200, host: 9200
  config.vm.network "forwarded_port", guest: 443, host: 8443
  # config.vm.network "forwarded_port", guest: 8181, host: 8181, auto_correct: true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
     # vb.gui = true

     # v.customize ["modifyvm", :id, "--vram", "<vramsize in MB>"]
     # Valid range is anything between 0 to 256, depending on driver and 3D-accel
     # See https://www.virtualbox.org/manual/ch08.html#vboxmanage-modifyvm
     # vb.customize ["modifyvm", :id, "--vram", "64"]
     # vb.customize ['modifyvm', :id, '--natnet1', '192.168.222.0/24']
  
     # Customize the amount of memory on the VM:
     vb.cpus = 1
     vb.memory = 1024
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # For ansible:
  # https://www.vagrantup.com/docs/provisioning/ansible_common.html

  config.vm.hostname = "vagrant-bionic"

  # This is the ansible portion
  config.vm.provision "ansible" do |ansible|
    ansible.playbook="setup-minimal.yml"
    # ansible.start_at_task="server : Install ripgrep"
    # ansible.become=true
    # ansible.verbose="vvvv"
    # ansible.tags="update,punkie"
    ansible.extra_vars = {
      user_role: "vagrant"
    }
    # ansible.extra_vars = {
    #   ntp_server: "pool.ntp.org",
    #   nginx: {
    #     port: 8008,
    #     workers: 4
    #   }
    # }
  end

  # If you don't have ansible setup, you can also do some shell commands here
  # for a pre-setup, not the <<-SHELL at the first line
  #
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
