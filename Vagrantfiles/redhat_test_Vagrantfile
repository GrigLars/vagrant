Vagrant.configure("2") do |config|
  config.vm.network "public_network", type: "dhcp", bridge: "eno1"

  # I don't need this plugin, really
  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = false
  end

  # We have one customer with a RHEL6.? - but we do not include them at this time.
  # So the versions are RHEL 7.6, 7.7, 7.8, 7,9 and 8.1,8.2,8.4

  # Redhat 8.6
  config.vm.define "rhel86" do |rhel86|
    rhel86.vm.box = "generic/rhel8"
    rhel86.vm.hostname = "vagrant-rhel86"
  end

  # Redhat 8.4
  config.vm.define "rhel84" do |rhel84|
    rhel84.vm.box = "heytherehi/rhel8.4"
    rhel84.vm.hostname = "vagrant-rhel84"
  end

  # Redhat 8.2
  config.vm.define "rhel82" do |rhel82|
    rhel82.vm.box = "bb_sdet/rhel82"
    rhel82.vm.hostname = "vagrant-rhel82"
  end

  # Redhat 8.1
  config.vm.define "rhel81" do |rhel81|
    rhel81.vm.box = "dalwar23/rhel81"
    rhel81.vm.hostname = "vagrant-rhel81"
  end

  # Redhat 7.6
  config.vm.define "rhel76" do |rhel76|
    rhel76.vm.box = "byronical-nz/rhel7.6-minimal"
    rhel76.vm.hostname = "vagrant-rhel76"
  end

  # Redhat 7.7
  config.vm.define "rhel77" do |rhel77|
    rhel77.vm.box = "bhiravabhatla/rhel7.7_nginx"
    rhel77.vm.hostname = "vagrant-rhel77"
  end

  # Redhat 7.8
  config.vm.define "rhel78" do |rhel78|
    rhel78.vm.box = "bb_sdet/rhel78"
    rhel78.vm.hostname = "vagrant-rhel78"
  end

  # Redhat 7.9
  config.vm.define "rhel79" do |rhel79|
    rhel79.vm.box = "generic/rhel7"
    rhel79.vm.hostname = "vagrant-rhel79"
  end

#  # 16.04 Xenial Xerus
#  config.vm.define "xenial" do |xenial|
#    xenial.vm.box = "ubuntu/xenial64"
#    xenial.vm.hostname = "vagrant-xenial"
#    xenial.vm.provision "shell", inline: "sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get dist-upgrade -y"
#  end

end

# vagrant up supports parallel VM start with the key --parallel:
#   --[no-]parallel Enable or disable parallelism if provider supports it
# 
# Default vagrant provider VirtualBox doesn't support it, but you can start your 
#   VMs simultaneously using xargs, which supports parallel command execution with 
#   the key -P <max-procs> (example provided exactly for your Vagrantfile):
# grep config.vm.define Vagrantfile | awk -F'"' '{print $2}' | xargs -P5 -I {} vagrant up {}

# To Run commands on multiple instances, you have to do
# COMMAND='lsb_release -a'
# for foo in $(vagrant status --machine-readable | grep 'provider,')
# do 
# 	bar=$(echo $foo | awk -F, '{print $2}')
#	echo -e "\033[33m$bar\033[\0m"
#	vagrant ssh -c "$COMMAND" $bar
# done
# 
# Or as one line:
# 
# COMMAND='systemd-resolve --status | grep Servers'; for foo in $(vagrant status --machine-readable | grep 'provider,'); do bar=$(echo $foo | awk -F, '{print $2}'); echo -e "\033[33m$bar \033[\0m"; vagrant ssh -c "$COMMAND" $bar; done

